# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vhT3Mv9ViUnu1tGc2zQSb9V4FGmDVDL6
"""

from sklearn import datasets
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split

import pickle
import pandas as pd
import numpy as np
import joblib 

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score  

dataset = pd.read_csv('performance.csv', encoding='latin-1')

import pandas as pd
import io
 
train_df = dataset

gender_train = pd.get_dummies(train_df.Gender)
gender_train.columns = ['1_gen','2_gen','3_gen']
sleep_train = pd.get_dummies(train_df.Sleep_time)
sleep_train.columns = ['1_slot','2_slot','3_slot','4_slot','5_slot']
feeling_train = pd.get_dummies(train_df.Feeling)
feeling_train.columns = ['1_feel','2_feel','3_feel','4_feel']
med_train = pd.get_dummies(train_df.Medication)
med_train.columns = ['Yes','No']
water_intake_train = pd.get_dummies(train_df.water_intake)
water_intake_train.columns = ['1_case','2_case','3_case']
screen_intake_train = pd.get_dummies(train_df.screen_time)
screen_intake_train.columns = ['1_case','2_case','3_case']
current_feeling = pd.get_dummies(train_df.current_feeling)
current_feeling.columns = ['1_case','2_case','3_case','4_case']
physical_activity = pd.get_dummies(train_df.physical_activity)
physical_activity.columns = ['1_case','2_case','3_case']
junk_food = pd.get_dummies(train_df.junk_food)
junk_food.columns = ['1_case','2_case','3_case']
smoke_drink = pd.get_dummies(train_df.smoke_drink)
smoke_drink.columns = ['1_case','2_case','3_case','4_case']
train_df = pd.concat([train_df,feeling_train,med_train,water_intake_train,screen_intake_train,physical_activity], axis = 1)

train_df.drop(['Gender', 'issues', 'Sleep_time', 'Feeling', 'Medication',
       'water_intake', 'screen_time', 'current_feeling', 'smoke_drink',
       'physical_activity', 'junk_food'], axis = 1, inplace = True)

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()

train_df['color']= label_encoder.fit_transform(train_df['color'])  
train_df['music']= label_encoder.fit_transform(train_df['music'])  
train_df['food']= label_encoder.fit_transform(train_df['food'])  
train_df['yourself']= label_encoder.fit_transform(train_df['yourself'])  
train_df['being_alone']= label_encoder.fit_transform(train_df['being_alone'])

y1_train = train_df['color']
y2_train = train_df['music']
y3_train = train_df['food']
y4_train = train_df['yourself']
y5_train = train_df['being_alone']

train_df.drop(['being_alone', 'color', 'music', 'yourself', 'food'], axis = 1, inplace = True)

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0, 1))
train_df = sc.fit_transform(train_df)
X_train, X_test, y_train, y_test = train_test_split(train_df, y1_train, random_state = 0)
# training a linear SVM classifier
from sklearn.svm import SVC
svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)
svm_predictions1 = svm_model_linear.predict(X_test)
  
# model accuracy for X_test  
accuracy = svm_model_linear.score(X_test, y_test)

X_train, X_test, y_train, y_test = train_test_split(train_df, y2_train, random_state = 0)
# training a linear SVM classifier
from sklearn.svm import SVC
svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)
svm_predictions2 = svm_model_linear.predict(X_test)
  
# model accuracy for X_test  
accuracy = svm_model_linear.score(X_test, y_test)


X_train, X_test, y_train, y_test = train_test_split(train_df, y3_train, random_state = 0)
# training a linear SVM classifier
from sklearn.svm import SVC
svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)
svm_predictions3 = svm_model_linear.predict(X_test)
  
# model accuracy for X_test  
accuracy = svm_model_linear.score(X_test, y_test)

# print(accuracy)

X_train, X_test, y_train, y_test = train_test_split(train_df, y4_train, random_state = 0)
# training a linear SVM classifier
from sklearn.svm import SVC
svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)
svm_predictions4 = svm_model_linear.predict(X_test)
  
# model accuracy for X_test  
accuracy = svm_model_linear.score(X_test, y_test)

# print(accuracy)

X_train, X_test, y_train, y_test = train_test_split(train_df, y5_train, random_state = 0)
# training a linear SVM classifier
from sklearn.svm import SVC
svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train)
svm_predictions5 = svm_model_linear.predict(X_test)
  
# model accuracy for X_test  
accuracy = svm_model_linear.score(X_test, y_test)

# print(accuracy)

#  print(svm_predictions5)

# svm_predictions5.size



svm_model_linear1 = SVC(kernel = 'linear', C = 1)
svm_model_linear1.fit(train_df, y1_train)

svm_model_linear2 = SVC(kernel = 'linear', C = 1)
svm_model_linear2.fit(train_df, y2_train)

svm_model_linear3 = SVC(kernel = 'linear', C = 1)
svm_model_linear3.fit(train_df, y3_train)

svm_model_linear4 = SVC(kernel = 'linear', C = 1)
svm_model_linear4.fit(train_df, y4_train)

svm_model_linear5 = SVC(kernel = 'linear', C = 1)
svm_model_linear5.fit(train_df, y5_train)

filename1 = 'model1.pkl'
filename2 = 'model2.pkl'
filename3 = 'model3.pkl'
filename4 = 'model4.pkl'
filename5 = 'model5.pkl'
joblib.dump(svm_model_linear1, filename1)
joblib.dump(svm_model_linear2, filename2)
joblib.dump(svm_model_linear3, filename3)
joblib.dump(svm_model_linear4, filename4)
joblib.dump(svm_model_linear5, filename5)

pickle.dump(sc, open("../scaler.sav", "wb"))

pickle.dump(svm_model_linear1, open("../ml_model1.sav", "wb"))
pickle.dump(svm_model_linear2, open("../ml_model2.sav", "wb"))
pickle.dump(svm_model_linear3, open("../ml_model3.sav", "wb"))
pickle.dump(svm_model_linear4, open("../ml_model4.sav", "wb"))
pickle.dump(svm_model_linear5, open("../ml_model5.sav", "wb"))

